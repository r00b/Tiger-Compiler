structure A = Absyn

%%
%term
    EOF 
  | ID of string
  | INT of int
  | STRING of string 
  | COMMA
  | COLON
  | SEMICOLON
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK 
  | LBRACE
  | RBRACE
  | DOT 
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | EQ
  | NEQ
  | LT
  | LE
  | GT
  | GE
  | AND
  | OR
  | ASSIGN
  | ARRAY
  | IF
  | THEN
  | ELSE
  | WHILE
  | FOR
  | TO
  | DO
  | LET
  | IN
  | END
  | OF 
  | BREAK
  | NIL
  | FUNCTION
  | VAR
  | TYPE 

%nonterm
          program of A.exp
	| exps of A.exp list 
        | exp of A.exp
	| dec of A.dec 
	| ty of A.ty
        | op of A.oper


     
%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

program	:
	  exps		     (exps)

exps : exp SEMICOLON exps    (exp::exps)
     | NIL                   (A.NilExp)
			     
	
exp :
      VAR                    (A.VarExp(VAR))
    | NIL		     (A.NilExp)
    | INT                    (A.IntExp(INT))
    | STRING                 (A.StringExp(STRING,STRINGleft))
    | ID LPAREN exp RPAREN   (A.CallExp({func: , args: exp, pos: IDleft}))
    | exp op exp             (A.OpExp({left: exp, oper: op, right: exp2, pos: expleft}))
    |
    |
    | VAR ASSIGN exp         (A.AssignExp({var: VAR, exp: exp, pos: VARleft}))
    | IF exp THEN exp        (A.IfExp({test: exp, then': exp2, else': NIL, pos: IFleft}))
    | IF exp THEN exp ELSE exp (A.IfExp({test: exp, then': exp2, else': exp3, pos: IFleft}))
    | WHILE exp DO exp       (A.WhileExp({test: exp, body: exp2, pos: WHILEleft}))
    | FOR ID ASSIGN exp TO exp DO exp  (A.ForExp({var: , escape: , lo: exp, hi: exp2, body: exp3, pos: FORleft}))
    | BREAK                  (A.BreakExp(BREAKleft))
    | LET dec IN exp END     (A.LetExp({decs: , body: exp, pos: LETleft}))
    | 
	  
dec :

      
op :
     PLUS                    (A.PlusOp)
   | MINUS                   (A.MinusOp)
   | TIMES                   (A.TimesOp)
   | DIVIDE                  (A.DivideOp)
   | EQ                      (A.EqOp)
   | NEQ                     (A.NeqOp)
   | LT                      (A.LtOp)
   | LE                      (A.LeOp)
   | GT                      (A.GtOp)
   | GE                      (A.GeOp)
