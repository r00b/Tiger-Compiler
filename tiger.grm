structure A = Absyn

%%
%term
    EOF 
  | ID of string
  | INT of int
  | STRING of string 
  | COMMA
  | COLON
  | SEMICOLON
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK 
  | LBRACE
  | RBRACE
  | DOT 
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | EQ
  | NEQ
  | LT
  | LE
  | GT
  | GE
  | AND
  | OR
  | ASSIGN
  | ARRAY
  | IF
  | THEN
  | ELSE
  | WHILE
  | FOR
  | TO
  | DO
  | LET
  | IN
  | END
  | OF 
  | BREAK
  | NIL
  | FUNCTION
  | VAR
  | TYPE 

%nonterm
          program of A.exp
        | exp of A.exp
	| exp_list of A.exp list
	| bin_op of A.oper 

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

program	:
	  exp                              (exp)  

	
exp :
      ID                                   (A.VarExp(A.SimpleVar(Symbol.symbol(ID), IDleft)))
    | NIL		                   (A.NilExp)
    | INT                                  (A.IntExp(INT))
    | STRING                               (A.StringExp(STRING, STRINGleft))
    | ID LPAREN exp_list RPAREN            (A.CallExp({func = Symbol.symbol(ID), args = exp_list, pos = IDleft}))
    | exp bin_op exp                        (A.OpExp({left = exp, oper = bin_op, right = exp2, pos = expleft}))
	 
exp_list :
                                           (nil)
        | exp                              (exp::nil)
        | exp COMMA exp_list               (exp::exp_list)

bin_op :
     PLUS                    (A.PlusOp)
   | MINUS                   (A.MinusOp)
   | TIMES                   (A.TimesOp)
   | DIVIDE                  (A.DivideOp)
   | EQ                      (A.EqOp)
   | NEQ                     (A.NeqOp)
   | LT                      (A.LtOp)
   | LE                      (A.LeOp)
   | GT                      (A.GtOp)
   | GE                      (A.GeOp)
