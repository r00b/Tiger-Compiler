structure A = Absyn

%%
%term
    EOF
  | ID of string
  | INT of int
  | STRING of string
  | COMMA
  | COLON
  | SEMICOLON
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | LBRACE
  | RBRACE
  | DOT
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | EQ
  | NEQ
  | LT
  | LE
  | GT
  | GE
  | AND
  | OR
  | ASSIGN
  | ARRAY
  | IF
  | THEN
  | ELSE
  | WHILE
  | FOR
  | TO
  | DO
  | LET
  | IN
  | END
  | OF
  | BREAK
  | NIL
  | FUNCTION
  | VAR
  | TYPE

%nonterm
          program of A.exp
        | exp of A.exp
	      | exp_list of A.exp list
	      | bin_op of A.oper
        | ty
        | dec
        | decs
        | tydec
        | fundec
        | vardec
        | typeid 
        | tyfields 
        | commatyfields
        | T
        | expExceptNil

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

program	:
	  exp                              (exp)

exp :
      ID                                   (A.VarExp(A.SimpleVar(Symbol.symbol(ID), IDleft)))
    | INT                                  (A.IntExp(INT))
    | STRING                               (A.StringExp(STRING, STRINGleft))
    | LET decs IN exp END                  (A.NilExp)
    | NIL		                               (A.NilExp)

decs :
                                        ()
    |  T                             ()

T : 
  dec decs                            ()


dec :
       tydec                               (tydec)
    | fundec                               (fundec)
    | vardec                               (vardec)


tydec :
     TYPE ID EQ ty                     ({name=Symbol.symbol(ID), ty=ty, pos=TYPEleft})

fundec :
       FUNCTION ID LPAREN tyfields RPAREN EQ exp              ({name=Symbol.symbol(ID1), params=tyfields, result=NONE, body=exp, pos=FUNCTIONleft})
     | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp     ({name=Symbol.symbol(ID1), params=tyfields, result=ID2, body=exp, pos=FUNCTIONleft})

vardec :
       VAR ID ASSIGN expExceptNil          ({name=Symbol.symbol(ID), escape=ref true, typ=NONE, init=expExceptNil, pos=VARleft})
     | VAR ID COLON ID ASSIGN exp          ({name=Symbol.symbol(ID1), escape=ref true, typ=ID2, init=exp, pos=VARleft})


expExceptNil :
       ID                                   (A.VarExp(A.SimpleVar(Symbol.symbol(ID), IDleft)))
      | INT                                  (A.IntExp(INT))
      | STRING                               (A.StringExp(STRING, STRINGleft))
      | LET decs IN exp END                  (A.NilExp)

ty :
    ID                                 ()
   | LBRACE tyfields RBRACE            ()
   | ARRAY OF ID                       ()

tyfields :
     ID COLON ID commatyfields         ()

commatyfields : 
                                        ()
  | COMMA tyfields                        (tyfields)
