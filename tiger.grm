structure A = Absyn
structure P = PrintAbsyn

val outs : TextIO.outstream ref = ref (TextIO.openOut "tree.txt")

fun groupDecs (decs) =
    let fun helper (dec, []) = dec::nil 
          | helper (dec, a) = case (dec, List.hd(a)) of
                                (A.FunctionDec(v1), A.FunctionDec(v2)) => A.FunctionDec(List.hd (v1) ::v2)::List.tl(a)
                              | (A.TypeDec(v1), A.TypeDec(v2)) => A.TypeDec(List.hd(v1)::v2)::List.tl(a)
                              | _  => dec::List.hd(a)::List.tl(a)
    in
        foldr helper [] decs
    end


%%
%term
    EOF
  | ID of string
  | INT of int
  | STRING of string
  | COMMA
  | COLON
  | SEMICOLON
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | LBRACE
  | RBRACE
  | DOT
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | EQ
  | NEQ
  | LT
  | LE
  | GT
  | GE
  | AND
  | OR
  | ASSIGN
  | ARRAY
  | IF
  | THEN
  | ELSE
  | WHILE
  | FOR
  | TO
  | DO
  | LET
  | IN
  | END
  | OF
  | BREAK
  | NIL
  | FUNCTION
  | VAR
  | TYPE

%nonterm
          program of A.exp
        | exp of A.exp
	| exp_list of A.exp list
	| record_fields of (A.symbol * A.exp * A.pos) list
	| lval of A.var
        | ty of A.ty
        | dec of A.dec
        | decs of A.dec list
        | tydec of {name: A.symbol, ty:A.ty, pos:A.pos}
        | fundec of {name: A.symbol, params: A.field list, result: (A.symbol * A.pos) option, body: A.exp, pos: A.pos}
        | vardec of {name: A.symbol, escape: bool ref, typ: (A.symbol * A.pos) option, init: A.exp, pos: A.pos}
        | tyfields of {name: Symbol.symbol, escape: bool ref, typ: Symbol.symbol, pos: A.pos} list
        | commatyfields of {name: Symbol.symbol, escape: bool ref, typ: Symbol.symbol, pos: A.pos} list
        | T of A.dec list
        | expExceptNil of A.exp

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN
%right TYPE FUNCTION VAR
%right SEMICOLON
%left THEN
%left ELSE
%left OF
%left DO
%left ASSIGN
%left AND OR
%nonassoc LT LE GT GE EQ NEQ
%left PLUS MINUS
%left TIMES DIVIDE

%left ID
%left LBRACK

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

program	:
	  exp      (outs := TextIO.openOut "tree.txt"; P.print(!outs,exp); exp)  

exp :
      ID                                   (A.VarExp(A.SimpleVar(Symbol.symbol(ID), IDleft)))
    | INT                                  (A.IntExp(INT))
    | STRING                               (A.StringExp(STRING, STRINGleft))
    | ID LPAREN exp_list RPAREN            (A.CallExp({func = Symbol.symbol(ID), args = exp_list, pos = IDleft}))
    | exp PLUS exp                         (A.OpExp({left = exp, oper = A.PlusOp, right = exp2, pos = expleft}))
    | exp MINUS exp                        (A.OpExp({left = exp, oper = A.MinusOp, right = exp2, pos = expleft}))
    | exp TIMES exp                        (A.OpExp({left = exp, oper = A.TimesOp, right = exp2, pos = expleft}))
    | exp DIVIDE exp                       (A.OpExp({left = exp, oper = A.DivideOp, right = exp2, pos = expleft}))
    | exp EQ exp                           (A.OpExp({left = exp, oper = A.EqOp, right = exp2, pos = expleft}))
    | exp NEQ exp                          (A.OpExp({left = exp, oper = A.NeqOp, right = exp2, pos = expleft}))
    | exp LT exp                           (A.OpExp({left = exp, oper = A.LtOp, right = exp2, pos = expleft}))
    | exp LE exp                           (A.OpExp({left = exp, oper = A.LeOp, right = exp2, pos = expleft}))
    | exp GT exp                           (A.OpExp({left = exp, oper = A.GtOp, right = exp2, pos = expleft}))
    | exp GE exp                           (A.OpExp({left = exp, oper = A.GeOp, right = exp2, pos = expleft}))
    | exp AND exp                          (A.IfExp({test = exp, then' = exp2, else' = SOME(A.IntExp(0)), pos = ANDleft}))
    | exp OR exp                           (A.IfExp({test = exp, then' = A.IntExp(1), else' = SOME(exp2), pos = ORleft}))
    | ID LBRACE record_fields RBRACE       (A.RecordExp({fields = record_fields, typ = Symbol.symbol(ID), pos = IDleft}))
    | VAR ID ASSIGN exp                    (A.AssignExp({var = A.SimpleVar(Symbol.symbol(ID), VARleft), exp = exp, pos = VARleft}))
    | lval ASSIGN exp                      (A.AssignExp({var = lval, exp = exp, pos = lvalleft}))
    | IF exp THEN exp ELSE exp             (A.IfExp({test = exp, then' = exp2, else' = SOME exp3, pos = IFleft}))
    | IF exp THEN exp                      (A.IfExp({test = exp, then' = exp2, else' = NONE, pos = IFleft}))
    | WHILE exp DO exp                     (A.WhileExp({test = exp, body = exp2, pos = WHILEleft}))
    | FOR ID ASSIGN exp TO exp DO exp      (A.ForExp({var = Symbol.symbol(ID), escape = ref false, lo = exp, hi = exp2, body = exp3, pos = FORleft}))
    | BREAK                                (A.BreakExp(BREAKleft))
    | LPAREN RPAREN                        (A.SeqExp([]))
    | LPAREN exp RPAREN                    (exp)
    | exp SEMICOLON exp                    (case exp2 of
					      	A.SeqExp(exps) => A.SeqExp((exp, expleft)::exps)
					      | _ => A.SeqExp([(exp,expleft),(exp2,exp2left)]))
    | ID LBRACK exp RBRACK OF exp          (A.ArrayExp({typ = Symbol.symbol(ID), size = exp, init = exp2, pos = IDleft}))
    | LET decs IN exp END                  (A.LetExp({decs=groupDecs(decs), body=exp, pos=LETleft}))
	 
exp_list :
                                           (nil)
        | exp                              (exp::nil)
        | exp COMMA exp_list               (exp::exp_list)

record_fields :
                                                 (nil)
                | ID EQ exp                      ((Symbol.symbol(ID), exp, IDleft)::nil)
                | ID EQ exp COMMA record_fields  ((Symbol.symbol(ID), exp, IDleft)::record_fields)

lval :
       ID                      (A.SimpleVar(Symbol.symbol(ID), IDleft))
     | lval DOT ID             (A.FieldVar(lval, Symbol.symbol(ID), lvalleft))
     | ID LBRACK exp RBRACK    (A.SubscriptVar(A.SimpleVar(Symbol.symbol(ID),IDleft),exp,IDleft))
     | lval LBRACK exp RBRACK  (A.SubscriptVar(lval,exp,lvalleft))

decs :
                                        (nil)
    |  T                                (T)

T : 
  dec decs                            (dec::decs)


dec :
       tydec                               (A.TypeDec([tydec]))
    | fundec                               (A.FunctionDec([fundec]))
    | vardec                               (A.VarDec(vardec))


tydec :
     TYPE ID EQ ty                    ({name=Symbol.symbol(ID), ty=ty, pos=TYPEleft})


fundec :
       FUNCTION ID LPAREN tyfields RPAREN EQ exp              ({name=Symbol.symbol(ID), params=tyfields, result=NONE, body=exp, pos=FUNCTIONleft})
     | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp     ({name=Symbol.symbol(ID1),
                                                         params=tyfields, result=SOME((Symbol.symbol(ID2), ID2left)), body=exp, pos=FUNCTIONleft})

vardec :
       VAR ID ASSIGN expExceptNil          ({name=Symbol.symbol(ID), escape=ref true, typ=NONE, init=expExceptNil, pos=VARleft})
     | VAR ID COLON ID ASSIGN exp          ({name=Symbol.symbol(ID1), escape=ref true, typ=SOME((Symbol.symbol(ID2), ID2left)), init=exp, pos=VARleft})


expExceptNil :
       ID                                   (A.VarExp(A.SimpleVar(Symbol.symbol(ID), IDleft)))
      | INT                                  (A.IntExp(INT))
      | STRING                               (A.StringExp(STRING, STRINGleft))

ty :
    ID                                 (A.NameTy(Symbol.symbol(ID), IDleft))
   | LBRACE tyfields RBRACE            (A.RecordTy(tyfields))
   | ARRAY OF ID                       (A.ArrayTy(Symbol.symbol(ID), ARRAYleft))

tyfields :
     ID COLON ID commatyfields         ({name=Symbol.symbol(ID1), escape=ref true, typ=Symbol.symbol(ID2), pos=IDleft}::commatyfields)

commatyfields : 
                                          (nil)
  | COMMA tyfields                        (tyfields)
