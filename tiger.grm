structure A = Absyn

%%
%term
    EOF
  | ID of string
  | INT of int
  | STRING of string
  | COMMA
  | COLON
  | SEMICOLON
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | LBRACE
  | RBRACE
  | DOT
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | EQ
  | NEQ
  | LT
  | LE
  | GT
  | GE
  | AND
  | OR
  | ASSIGN
  | ARRAY
  | IF
  | THEN
  | ELSE
  | WHILE
  | FOR
  | TO
  | DO
  | LET
  | IN
  | END
  | OF
  | BREAK
  | NIL
  | FUNCTION
  | VAR
  | TYPE

%nonterm
          program of A.exp
        | exp of A.exp
	      | exp_list of A.exp list
	      | bin_op of A.oper
        | ty of A.ty
        | dec of A.dec
        | decs of A.dec list
        | tydec of {name: A.symbol, ty: A.ty, pos: A.pos}
        | tydecs of {name: A.symbol, ty: A.ty, pos: A.pos} list
        | typeid of A.symbol
        | tyfields of {name: A.symbol, escape: bool ref, typ: A.symbol, pos: A.pos} list
        | commatyfields of {name: A.symbol, escape: bool ref, typ: A.symbol, pos: A.pos} list
        | T

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

program	:
	  exp                              (exp)

exp :
      ID                                   (A.VarExp(A.SimpleVar(Symbol.symbol(ID), IDleft)))
    | INT                                  (A.IntExp(INT))
    | STRING                               (A.StringExp(STRING, STRINGleft))
    | LET decs IN exp END                  (A.LetExp({decs=decs, body=exp, pos=LETleft}))
    | NIL		                               (A.NilExp)

decs :
      dec T                             (dec::T)

T :
       decs                              (decs)
     |                                    ()

dec :
       tydecs                               (A.TypeDec(tydecs))

tydecs :
                                            ()
     | tydec tydecs                         (tydec::tydecs)

tydec :
     TYPE ID EQ ty                     ({name=Symbol.symbol(ID), ty=ty, pos=TYPEleft})

ty :
    ID                                 (A.NameTy(Symbol.symbol(ID), IDleft))
   | LBRACE tyfields RBRACE            (A.RecordTy(tyfields))
   | ARRAY OF ID                       (A.ArrayTy(Symbol.symbol(ID), ARRAYleft))
